
<program> ::= <external_declaration>*

<external_declaration> ::= <function_definition> | <declaration>

<function_definition> ::= <declaration_specifiers> <declarator> <compound_statement>

<declaration> ::= <declaration_specifiers> <init_declarator_list>? ";"

<declaration_specifiers> ::= <type_specifier> | <type_specifier> <declaration_specifiers>

<type_specifier> ::= "void" | "char" | "int" | "float" | "double"

<init_declarator_list> ::= <init_declarator> | <init_declarator> "," <init_declarator_list>

<init_declarator> ::= <declarator> | <declarator> "=" <initializer>

<declarator> ::= <pointer>? <direct_declarator>

<pointer> ::= "*" | "*" <pointer>

<direct_declarator> ::= <identifier> 
                      | "(" <declarator> ")"
                      | <direct_declarator> "[" <constant_expression>? "]"
                      | <direct_declarator> "(" <parameter_list>? ")"

<parameter_list> ::= <parameter_declaration> | <parameter_declaration> "," <parameter_list>

<parameter_declaration> ::= <declaration_specifiers> <declarator>

<compound_statement> ::= "{" <block_item_list>? "}"

<block_item_list> ::= <block_item> | <block_item> <block_item_list>

<block_item> ::= <declaration> | <statement>

<statement> ::= <expression_statement>
              | <compound_statement>
              | <selection_statement>
              | <iteration_statement>
              | <jump_statement>

<expression_statement> ::= <expression>? ";"

<selection_statement> ::= "if" "(" <expression> ")" <statement> ("else" <statement>)?

<iteration_statement> ::= "while" "(" <expression> ")" <statement>
                        | "for" "(" <expression_statement> <expression_statement> <expression>? ")" <statement>

<jump_statement> ::= "return" <expression>? ";"

<expression> ::= <assignment_expression> | <expression> "," <assignment_expression>

<assignment_expression> ::= <conditional_expression> 
                          | <unary_expression> "=" <assignment_expression>

<conditional_expression> ::= <logical_or_expression>

<logical_or_expression> ::= <logical_and_expression> | <logical_or_expression> "||" <logical_and_expression>

<logical_and_expression> ::= <equality_expression> | <logical_and_expression> "&&" <equality_expression>

<equality_expression> ::= <relational_expression> 
                        | <equality_expression> "==" <relational_expression>
                        | <equality_expression> "!=" <relational_expression>

<relational_expression> ::= <additive_expression>
                          | <relational_expression> "<" <additive_expression>
                          | <relational_expression> ">" <additive_expression>
                          | <relational_expression> "<=" <additive_expression>
                          | <relational_expression> ">=" <additive_expression>

<additive_expression> ::= <multiplicative_expression>
                        | <additive_expression> "+" <multiplicative_expression>
                        | <additive_expression> "-" <multiplicative_expression>

<multiplicative_expression> ::= <unary_expression>
                              | <multiplicative_expression> "*" <unary_expression>
                              | <multiplicative_expression> "/" <unary_expression>

<unary_expression> ::= <postfix_expression> | "!" <unary_expression> | "-" <unary_expression>

<postfix_expression> ::= <primary_expression>
                       | <postfix_expression> "[" <expression> "]"
                       | <postfix_expression> "(" <argument_expression_list>? ")"

<primary_expression> ::= <identifier> | <constant> | "(" <expression> ")"

<argument_expression_list> ::= <assignment_expression> | <assignment_expression> "," <argument_expression_list>

<constant> ::= <integer_constant> | <floating_constant>

<identifier> ::= [a-zA-Z_][a-zA-Z0-9_]*

<integer_constant> ::= [0-9]+

<floating_constant> ::= [0-9]+"."[0-9]+

